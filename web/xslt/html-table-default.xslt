<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:oe="http://schemas.openehr.org/v1" xmlns:prop="http://tempuri.org/PropertyUnits.xsd" xmlns:term="http://openehr.org/Terminology.xsd" exclude-result-prefixes="#default xsl xsi xs oe prop term">
	<xsl:include href="am-path-helper.xsl"/>

   <!-- Transform version information - keep updated -->
   <xsl:variable name="transform-version">1.2 (26 March 2010)</xsl:variable>

   <!-- NOTE: Following two constants are used as metadata by external tools. Don't change unless you're changing the external tools as well! -->
   <xsl:variable name="outputFileExtension">html</xsl:variable>
   <xsl:variable name="targetLanguage">HTML (Hypertxt Markup Language)</xsl:variable>
  
    <!-- Content Paramters /-->
    <xsl:param name="language" select="oe:template/oe:language/oe:code_string"/>
	<xsl:param name="display-date">26/03/2010</xsl:param>

    <!-- Resource Parameters /-->
    <xsl:param name="css-file-path">css/tabular.css</xsl:param>
    <xsl:param name="images-path">pics</xsl:param>
    <xsl:param name="unit-property-data-path">PropertyUnitData.xml</xsl:param>
    <xsl:param name="terminology-data-path">terminology.xml</xsl:param>
	<xsl:param name="complete-html">yes</xsl:param>
	<xsl:param name="random-top-level-id"/><!-- This is needed to identify more than one open operational template in CKM -->
    
    <xsl:output indent="yes" omit-xml-declaration="yes" />
    
    <xsl:variable name="lcletters">abcdefghijklmnopqrstuvwxyz</xsl:variable> <!-- used for lower/upper case conversion via 'translate' xslt function -->
    <xsl:variable name="ucletters">ABCDEFGHIJKLMNOPQRSTUVWXYZ</xsl:variable> <!-- used for lower/upper case conversion via 'translate' xslt function -->
    <!-- 'base' pattern used for double datatype in DV_QUANTITY.precision constraint -->
    <!--<xsl:variable name="begin-double-base-pattern" xml:space="preserve">(\+|\-)?(0|[1-9][0-9]*)?(\.[0-9]{</xsl:variable>
    <xsl:variable name="end-double-base-pattern" xml:space="preserve">})?</xsl:variable>
    <xsl:variable name="integral-pattern">(\+|\-)?(0|[1-9][0-9]*)?</xsl:variable> --><!-- pattern used for double datatype in DV_QUANTITY.precision constraint to be integral/whole only -->

	<!--Template HTML Root  /-->
	<xsl:template match="oe:template" xmlns="http://www.w3.org/1999/xhtml">
		<xsl:text disable-output-escaping="yes" xml:space="preserve"><![CDATA[<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">]]>
		</xsl:text>
		<xsl:choose>
			<xsl:when test="$complete-html!='yes'">
				<xsl:call-template name="produce-content-html"/>
			</xsl:when>
			<xsl:otherwise><!-- only add the header if it is to be used as a complete document -->
				<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="{$language}" lang="{$language}" dir="ltr">
					<head>
						<title><xsl:value-of select="oe:concept"/></title>
						<meta http-equiv="Content-Language" content="{$language}"/>
						<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
						<link rel="stylesheet" type="text/css" href="{$css-file-path}"/>
					</head>
					<body>
						<xsl:call-template name="produce-content-html"/>
					</body>
				</html>
			</xsl:otherwise>
		</xsl:choose>
		<xsl:comment>HTML automatically generated by Operational Template To HTML Tabular transform v<xsl:value-of select="$transform-version"/>.</xsl:comment>
	</xsl:template>
	
    <xsl:template name="produce-content-html" xmlns="http://www.w3.org/1999/xhtml">
      <div id="top">
      	<h1 class="bordered-title"><xsl:value-of select="oe:concept"/></h1>
      	<div id="information">
      	  <h2>Purpose</h2>
      	  <p id="purpose"><img src="{$images-path}/menu/information.png" alt="information"/> <xsl:value-of select="oe:description/oe:details/oe:purpose"/></p>
      	</div>
      </div>
      <div class="description">
          <table class="section">
              <tr>
                  <td class="sectionHead">Archetype ID</td>
                  <td class="sectionBody"><xsl:value-of select="oe:definition/oe:archetype_id/oe:value"/></td>
              </tr>
              <tr>
                  <td class="sectionHead">Template ID</td>
                  <td class="sectionBody"><xsl:value-of select="oe:uid/oe:value"/></td>
              </tr>
              <xsl:apply-templates select="oe:description/oe:other_details"/>
          </table>
      </div>
      <table class="contentTable">
          <tbody>
              <tr class="contentHeaderRow">
                  <th>Name</th><th>Purpose</th><th>Repeatable</th><th>CRE</th>
                  <th>Enterprise Rules</th><th>User</th><th>Owner</th><th>Specialty</th>
                  <th>Care setting</th><th>Client group</th><th>Id</th><th>Version</th>
                  <th>Sign off</th><th>Copyright</th><th>Relationships</th><th>Annotations</th>
              </tr>
              <xsl:apply-templates select="oe:definition">
                  <xsl:with-param name="archetype-root" select="oe:definition" />
                  <xsl:with-param name="odd">even</xsl:with-param>
              </xsl:apply-templates>    
          </tbody>
      </table>
    </xsl:template>
    
    <xsl:template match="oe:other_details" xmlns="http://www.w3.org/1999/xhtml"><!-- other details RESOURCE_DESCRIPTION item -->
        <tr>
            <td class="sectionHead"><xsl:value-of select="@id"/></td>
            <td class="sectionBody"><xsl:value-of select="."/></td>
        </tr>
    </xsl:template>
    
    <!-- COMPOSITION, CONTENT_ITEMs (ie SECTIONs, ENTRYs) + archetyped ITEM_STRUCTUREs and CLUSTERs -->
    <xsl:template match="*[name()='definition' or (@xsi:type='C_ARCHETYPE_ROOT' and not(oe:rm_type_name='ELEMENT')) or oe:rm_type_name='SECTION' or oe:rm_type_name='OBSERVATION' or oe:rm_type_name='EVALUATION' or oe:rm_type_name='ACTION' or oe:rm_type_name='INSTRUCTION' or oe:rm_type_name='ADMIN_ENTRY']" xmlns="http://www.w3.org/1999/xhtml">
    <!--<xsl:template match="*[oe:rm_type_name='COMPOSITION' or oe:rm_type_name='SECTION' or oe:rm_type_name='OBSERVATION' or oe:rm_type_name='EVALUATION' or oe:rm_type_name='INSTRUCTION' or oe:rm_type_name='ACTION' or  oe:rm_type_name='ADMIN_ENTRY']" xmlns="http://www.w3.org/1999/xhtml" exclude-result-prefixes="#all">-->
        <xsl:param name="archetype-root" />
        <xsl:param name="odd"/>
    	
    	<xsl:variable name="currentNodePath"><xsl:call-template name="path-of-item">
    		<xsl:with-param name="node" select="."/>                        
    	</xsl:call-template></xsl:variable>
        <xsl:variable name="node-name"><xsl:call-template name="get-name">
            <xsl:with-param name="archetype-root" select="$archetype-root" />
            <xsl:with-param name="c_object" select="."></xsl:with-param>
        </xsl:call-template></xsl:variable>
        <xsl:variable name="node-id" select="oe:node_id/text()"/>
        <xsl:variable name="node-description" select="$archetype-root/oe:term_definitions[@code=$node-id]/oe:items[@id='description']" />
    	<xsl:variable name="defaultAnnotation" select="/oe:template/oe:annotations[@path=$currentNodePath]/oe:items[@id='default']"/>
        <xsl:variable name="archetype-id" select="$archetype-root/oe:archetype_id/oe:value"/>
        
        <tr>
            <td class="col_{$odd}_0"><xsl:value-of select="$node-name"/></td>
            <td class="col_{$odd}_1"><xsl:value-of select="$node-description"/></td>
            <td class="col_{$odd}_2"><xsl:call-template name="output-repeatability"><xsl:with-param name="c_object" select="."/></xsl:call-template></td>
            <td class="col_{$odd}_3">N/A</td>
            <td class="col_{$odd}_4">N/A</td>
            <td class="col_{$odd}_5">All</td>
            <td class="col_{$odd}_6">Connecting For Health (UK)</td>
            <td class="col_{$odd}_7">All</td>
            <td class="col_{$odd}_8">All</td>
            <td class="col_{$odd}_9">N/A</td>
            <td class="col_{$odd}_10"><a href="/{$archetype-id}.html"><xsl:value-of select="$archetype-id"/></a></td>
            <td class="col_{$odd}_11"><xsl:value-of select="substring-after(substring-after($archetype-id, '.'), '.')"/></td>
            <td class="col_{$odd}_12">Connecting For Health (UK)</td>
            <td class="col_{$odd}_13">Crown Copyright 2007</td>
            <td class="col_{$odd}_14">&#160;</td>
            <td class="col_{$odd}_15"><xsl:value-of select="$defaultAnnotation"/></td>
        </tr>

        <xsl:if test="oe:rm_type_name='COMPOSITION'">
            <xsl:variable name="composition-context" select="oe:attributes[oe:rm_attribute_name='context']/oe:children[oe:rm_type_name='EVENT_CONTEXT']"/>
            <xsl:if test="$composition-context and oe:attributes[oe:rm_attribute_name='category']/oe:children/oe:attributes/oe:children[oe:code_list='433']">
                <xsl:call-template name="output-event-context">
                    <xsl:with-param name="context-node" select="$composition-context"/>
                    <xsl:with-param name="archetype-root" select="."/>
                </xsl:call-template>
            </xsl:if>
        </xsl:if>
        
        <!-- traverse down the template tree -->
        <xsl:variable name="traversal-c_attribute"><xsl:choose>
            <xsl:when test="oe:rm_type_name='COMPOSITION'">content</xsl:when>
            <xsl:when test="oe:rm_type_name='SECTION'">items</xsl:when>
            <xsl:when test="oe:rm_type_name='OBSERVATION'">data</xsl:when>
            <xsl:when test="oe:rm_type_name='EVALUATION'">data</xsl:when>
            <xsl:when test="oe:rm_type_name='INSTRUCTION'">activities</xsl:when>
            <xsl:when test="oe:rm_type_name='ACTION'">description</xsl:when>
            <xsl:when test="oe:rm_type_name='ADMIN_ENTRY'">data</xsl:when>
            <!--<xsl:when test="oe:rm_type_name='HISTORY'">events</xsl:when>
            <xsl:when test="oe:rm_type_name='EVENT'">data</xsl:when>
            <xsl:when test="oe:rm_type_name='POINT_EVENT'">data</xsl:when>
                <xsl:when test="oe:rm_type_name='INTERVAL_EVENT'">data</xsl:when>-->
            <xsl:when test="oe:rm_type_name='ITEM_TREE'">items</xsl:when>
            <xsl:when test="oe:rm_type_name='ITEM_LIST'">items</xsl:when>
            <xsl:when test="oe:rm_type_name='ITEM_SINGLE'">item</xsl:when>
            <xsl:when test="oe:rm_type_name='ITEM_TABLE'">rows</xsl:when>
            <xsl:when test="oe:rm_type_name='CLUSTER'">items</xsl:when>
        </xsl:choose></xsl:variable>

        <xsl:for-each select="oe:attributes[oe:rm_attribute_name=$traversal-c_attribute]/oe:children">
            <xsl:variable name="odd-even"><xsl:choose>
                <xsl:when test="(position() mod 2)=1">odd</xsl:when>
                <xsl:otherwise>even</xsl:otherwise>
            </xsl:choose></xsl:variable>
            <xsl:choose>
                <xsl:when test="@xsi:type='C_ARCHETYPE_ROOT'">
                    <xsl:apply-templates select=".">
                        <xsl:with-param name="archetype-root" select="." />
                        <xsl:with-param name="odd" select="$odd-even"/>
                    </xsl:apply-templates>
                </xsl:when>
                <xsl:otherwise>
                    <tr><td colspan="15">
                        <xsl:apply-templates select=".">
                            <xsl:with-param name="archetype-root" select="$archetype-root" />
                            <xsl:with-param name="odd" select="$odd-even"/>
                        </xsl:apply-templates>
                    </td></tr>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
        
        <!-- visit protocol for CARE_ENTRYs -->
        <xsl:for-each select="oe:attributes[oe:rm_attribute_name='protocol']/oe:children">
            <tr>
                <td colspan="15">
                    <xsl:choose>
                        <xsl:when test="@xsi:type='C_ARCHETYPE_ROOT'">
                            <xsl:apply-templates select="."><!-- don't need to send in odd-even because direct children of CARE_ENTRYs cannot be CONTENT_ITEMs -->
                                <xsl:with-param name="archetype-root" select="." />
                            </xsl:apply-templates>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:apply-templates select=".">
                                <xsl:with-param name="archetype-root" select="$archetype-root" />
                            </xsl:apply-templates>
                        </xsl:otherwise>
                    </xsl:choose>
                </td>
            </tr>
        </xsl:for-each>
        
    </xsl:template>

    <!-- HISTORYs, EVENTs, non-archetyped ITEM_STRUCTUREs, non-archetyped CLUSTERs -->
    <xsl:template match="*[oe:rm_type_name='HISTORY' or oe:rm_type_name='POINT_EVENT' or oe:rm_type_name='INTERVAL_EVENT' or oe:rm_type_name='EVENT' or (starts-with(oe:rm_type_name, 'ITEM_') and @xsi:type!='C_ARCHETYPE_ROOT') or (oe:rm_type_name='CLUSTER' and @xsi:type!='C_ARCHETYPE_ROOT') or oe:rm_type_name='ACTIVITY']" xmlns="http://www.w3.org/1999/xhtml">
        <xsl:param name="archetype-root" />
        <xsl:param name="archetype-path">/<xsl:value-of select="parent::node()/oe:rm_attribute_name"/>[<xsl:value-of select="oe:node_id"/>]</xsl:param>
        <xsl:variable name="node-id" select="oe:node_id/text()"/>
        <xsl:variable name="node-description" select="$archetype-root/oe:term_definitions[@code=$node-id]/oe:items[@id='description']" />
        <xsl:variable name="archetype-id" select="$archetype-root/oe:archetype_id/oe:value"/>
        <xsl:variable name="div-css-class">ehrclasses-openehr-data_structures-<xsl:value-of select="translate(oe:rm_type_name, $ucletters, $lcletters)"/></xsl:variable>
        
            <div class="{$div-css-class}">
                <xsl:choose>
                    <xsl:when test="oe:rm_type_name='HISTORY'">
                        <div class="historyHeading"><span class="sectorName">DATA</span></div>
                    </xsl:when>
                    <xsl:otherwise>
                        <div class="sectorHeading">
                            <span class="sectorNameLabel">Name: </span>
                            <span class="sectorName">
                                <xsl:choose>
                                    <xsl:when test="oe:rm_type_name='HISTORY' or starts-with(oe:rm_type_name,'ITEM_')"><xsl:value-of select="parent::node()/oe:rm_attribute_name"/></xsl:when>
                                    <xsl:otherwise><xsl:call-template name="get-name">
                                        <xsl:with-param name="archetype-root" select="$archetype-root" />
                                        <xsl:with-param name="c_object" select="."></xsl:with-param>
                                    </xsl:call-template></xsl:otherwise>
                                </xsl:choose>
                            </span>
                            <xsl:if test="not(starts-with(oe:rm_type_name, 'ITEM_'))">
                                <span class="sectorDescriptionLabel">Description: </span>
                                <span class="sectorDescription"><xsl:value-of select="$node-description"></xsl:value-of></span>
                            </xsl:if>
                        </div>
                    	<div class="sectorContentLine">
                        <span class="sectorType">Composite:
                            <xsl:choose>
                                <xsl:when test="oe:rm_type_name='POINT_EVENT' or oe:rm_type_name='EVENT' or oe:rm_type_name='INTERVAL_EVENT'">Timing</xsl:when>
                                <xsl:when test="oe:rm_type_name='ITEM_TREE'">Tree</xsl:when>
                                <xsl:when test="oe:rm_type_name='ITEM_LIST'">List</xsl:when>
                                <xsl:when test="oe:rm_type_name='ITEM_SINGLE'">Item</xsl:when>
                                <xsl:when test="oe:rm_type_name='ITEM_TABLE'">Table</xsl:when>
                                <xsl:when test="oe:rm_type_name='CLUSTER'">Cluster</xsl:when>
                            </xsl:choose>
                        </span>
                        
                        <xsl:choose>
                            <xsl:when test="oe:rm_type_name='EVENT' or oe:rm_type_name='POINT_EVENT' or oe:rm_type_name='INTERVAL_EVENT'"><!-- EVENT, POINT_EVENT, INTERVAL_EVENT -->
                                <span class="DataType">DateTime</span>
                                <span class="Cardinality"><xsl:call-template name="get-cardinality">
                                    <xsl:with-param name="c_object" select="."/>
                                    <xsl:with-param name="enclose">false</xsl:with-param>
                                </xsl:call-template></span>
                                <xsl:choose>
                                    <xsl:when test="oe:rm_type_name='EVENT' or oe:rm_type_name='POINT_EVENT'">
                                        <span class="ConstraintExpression">PointInTime (Offset = )</span>
                                    </xsl:when>
                                    <xsl:when test="oe:rm_type_name='INTERVAL_EVENT'">
                                        <span class="ConstraintExpression">Interval<br/>Offset = </span>
                                    </xsl:when>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test="starts-with(oe:rm_type_name,'ITEM_')"><!-- ITEM_TREE, ITEM_LIST, ITEM_SINGLE, ITEM_TABLE -->
                                <span class="DataType">Formatting</span>
                                <span class="Cardinality"><xsl:call-template name="get-cardinality">
                                    <xsl:with-param name="c_object" select="."/>
                                </xsl:call-template></span>
                            </xsl:when>
                            <xsl:when test="oe:rm_type_name='CLUSTER'"><!-- CLUSTER -->
                                <span class="DataType">Name=Text</span>
                                <span class="Cardinality"><xsl:call-template name="get-cardinality">
                                    <xsl:with-param name="c_object" select="."/>
                                </xsl:call-template></span>
                            </xsl:when>
                        </xsl:choose>
                    	</div>
                    </xsl:otherwise>
                </xsl:choose>
                
                <!-- traverse down the template tree -->
                <xsl:variable name="traversal-c_attribute"><xsl:choose>
                    <xsl:when test="oe:rm_type_name='HISTORY'">events</xsl:when>
                    <xsl:when test="oe:rm_type_name='EVENT' or oe:rm_type_name='POINT_EVENT' or oe:rm_type_name='INTERVAL_EVENT'">data</xsl:when>
                    <xsl:when test="oe:rm_type_name='ITEM_TREE' or oe:rm_type_name='CLUSTER' or oe:rm_type_name='ITEM_LIST'">items</xsl:when>
                    <xsl:when test="oe:rm_type_name='ITEM_SINGLE'">item</xsl:when>
                    <xsl:when test="oe:rm_type_name='ITEM_TABLE'">rows</xsl:when>
                </xsl:choose></xsl:variable>
                
                <xsl:for-each select="oe:attributes[oe:rm_attribute_name=$traversal-c_attribute]/oe:children">
                    <xsl:choose>
                        <xsl:when test="@xsi:type='C_ARCHETYPE_ROOT'">
                            <xsl:apply-templates select=".">
                                <xsl:with-param name="archetype-root" select="." />
                                <xsl:with-param name="archetype-path">/<xsl:value-of select="$traversal-c_attribute"/>[<xsl:value-of select="oe:node_id"/>]</xsl:with-param>
                            </xsl:apply-templates>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:apply-templates select=".">
                                <xsl:with-param name="archetype-root" select="$archetype-root" />
                                <xsl:with-param name="archetype-path"><xsl:value-of select="$archetype-path"/>/<xsl:value-of select="$traversal-c_attribute"/>[<xsl:value-of select="oe:node_id"/>]</xsl:with-param>
                            </xsl:apply-templates>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:for-each>
                
                <xsl:if test="oe:rm_type_name='EVENT' or oe:rm_type_name='POINT_EVENT' or oe:rm_type_name='INTERVAL_EVENT'">
                    <xsl:for-each select="oe:attributes[oe:rm_attribute_name='state']/oe:children">
                        <xsl:choose>
                            <xsl:when test="@xsi:type='C_ARCHETYPE_ROOT'">
                                <xsl:apply-templates select=".">
                                    <xsl:with-param name="archetype-root" select="." />
                                    <xsl:with-param name="archetype-path">/state[<xsl:value-of select="oe:node_id"/>]</xsl:with-param>
                                </xsl:apply-templates>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:apply-templates select=".">
                                    <xsl:with-param name="archetype-root" select="$archetype-root" />
                                    <xsl:with-param name="archetype-path"><xsl:value-of select="$archetype-path"/>/state[<xsl:value-of select="oe:node_id"/>]</xsl:with-param>
                                </xsl:apply-templates>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:if>
            </div>
    </xsl:template>

    <xsl:template match="*[oe:rm_type_name='ELEMENT']" xmlns="http://www.w3.org/1999/xhtml"><!-- ELEMENT -->
        <xsl:param name="archetype-root"/>
        <xsl:param name="archetype-path">/<xsl:value-of select="parent::node()/oe:rm_attribute_name"/>[<xsl:value-of select="oe:node_id"/>]</xsl:param>
    	
    	<xsl:variable name="currentNodePath"><xsl:call-template name="path-of-item">
    		<xsl:with-param name="node" select="."/>                        
    	</xsl:call-template></xsl:variable>
    	<xsl:variable name="defaultAnnotation" select="/oe:template/oe:annotations[@path=$currentNodePath]/oe:items[@id='default']"/>
    	
        <xsl:variable name="node-id" select="oe:node_id/text()"/>
        <xsl:variable name="node-description" select="$archetype-root/oe:term_definitions[@code=$node-id]/oe:items[@id='description']" />
        <div class="ehrclasses-element">
            <div class="elementHeading">
                <span class="sectorNameLabel">Data element name: </span>
                <span class="sectorName"><xsl:call-template name="get-name">
                    <xsl:with-param name="c_object" select="."/><xsl:with-param name="archetype-root" select="$archetype-root"/>
                </xsl:call-template></span>
                <span class="sectorDescriptionLabel">Description: </span>
                <span class="sectorDescription"><xsl:value-of select="$node-description"/></span>
            </div>
            <table class="dataTable">
                <tbody>
                    <tr class="dataTableHeader">
                        <td class="colComposite">CDC Type</td>
                        <td class="colDataType">Data Type (openEHR)</td>
                        <td class="colCardinality">Cardinality</td>
                        <td class="colCardinality">Default</td>
                        <td class="colValidation">Validation</td>
                        <td class="colMulti">Multi-select</td>
                        <td class="colReadOnly">Read only</td>
                        <td class="colElementSnomed">Item: SNOMED</td>
                        <td class="colLimitToList">Limit to list</td>
                        <td class="colSnomedCodes">Values: SNOMED</td>
                        <td class="colArchetypeId">Item: Archetype</td>
                        <xsl:if test="oe:attributes[oe:rm_attribute_name='value']/oe:children/oe:rm_type_name='DV_TEXT' or oe:attributes[oe:rm_attribute_name='value']/oe:children/oe:rm_type_name='DV_CODED_TEXT'"><td class="colAtCodes">Values: Archetype</td></xsl:if>
                        <td class="colAnnotation">Annotation</td>
                    </tr>
                    
                    <xsl:variable name="element-cardinality"><xsl:call-template name="get-cardinality"><xsl:with-param name="c_object" select="."/></xsl:call-template></xsl:variable>
                    <xsl:for-each select="oe:attributes[oe:rm_attribute_name='value']/oe:children">
                        <tr>
                            <td class="sectorType">Primary</td>
                            <td class="DataType"><xsl:value-of select="substring(oe:rm_type_name, 4)"/></td>
                            <td class="Cardinality"><xsl:value-of select="$element-cardinality"/></td>
                            <td class="DefaultValue"></td>
                            <xsl:choose>
                                
                                <xsl:when test="oe:rm_type_name='DV_BOOLEAN'">
                                    <td class="ConstraintExpression">
                                        <xsl:variable name="c-boolean" select="oe:attributes[oe:rm_attribute_name='value']/oe:children/oe:item[@xsi:type='C_BOOLEAN']"/>
                                        <xsl:if test="$c-boolean">
                                            <xsl:if test="$c-boolean/oe:true_valid='true'">True<xsl:if test="$c-boolean/oe:false_valid='true'">, </xsl:if></xsl:if>
                                            <xsl:if test="$c-boolean/oe:false_valid='true'">False</xsl:if>
                                        </xsl:if>
                                    </td>
                                    <td class="AllowMultipleSelection">False</td>
                                    <td class="ReadOnly">False</td>
                                    <td class="Snomed">n/a</td>
                                    <td class="LimitToList">n/a</td>
                                    <td class="SnomedValues">n/a</td>
                                </xsl:when>
                                
                                <xsl:when test="oe:rm_type_name='DV_COUNT'">
                                    <td class="ConstraintExpression"><xsl:call-template name="output-count-constraint">
                                        <xsl:with-param name="count-c-object" select="."/>
                                    </xsl:call-template></td>
                                    <td class="AllowMultipleSelection">False</td>
                                    <td class="ReadOnly">False</td>
                                    <td class="Snomed">n/a</td>
                                    <td class="LimitToList">n/a</td>
                                    <td class="SnomedValues">n/a</td>
                                </xsl:when>

                                <xsl:when test="oe:rm_type_name='DV_DATE'">
                                    <td class="ConstraintExpression"><xsl:call-template name="output-date-constraint">
                                            <xsl:with-param name="date-c-object" select="."/>
                                    </xsl:call-template></td>
                                    <td class="AllowMultipleSelection">False</td>
                                    <td class="ReadOnly">False</td>
                                    <td class="Snomed">n/a</td>
                                    <td class="LimitToList">n/a</td>
                                    <td class="SnomedValues">n/a</td>
                                </xsl:when>
                                
                                <xsl:when test="oe:rm_type_name='DV_DATE_TIME'">
                                    <td class="ConstraintExpression"><xsl:call-template name="output-datetime-constraint">
                                        <xsl:with-param name="datetime-c-object" select="."/>
                                    </xsl:call-template></td>
                                    <td class="AllowMultipleSelection">False</td>
                                    <td class="ReadOnly">False</td>
                                    <td class="Snomed">n/a</td>
                                    <td class="LimitToList">n/a</td>
                                    <td class="SnomedValues">n/a</td>
                                </xsl:when>
                                
                                <xsl:when test="oe:rm_type_name='DV_DURATION'">
                                    <td class="ConstraintExpression"><xsl:call-template name="output-duration-constraint">
                                        <xsl:with-param name="duration-c-object" select="."/>
                                    </xsl:call-template></td>
                                    <td class="AllowMultipleSelection">False</td>
                                    <td class="ReadOnly">False</td>
                                    <td class="Snomed">n/a</td>
                                    <td class="LimitToList">n/a</td>
                                    <td class="SnomedValues">n/a</td>
                                </xsl:when>
                                
                                <xsl:when test="oe:rm_type_name='DV_IDENTIFIER'">
                                    <td class="ConstraintExpression"><!-- tabular DV_IDENTIFIER constraint TO DO!! --></td>
                                    <td class="AllowMultipleSelection">False</td>
                                    <td class="ReadOnly">False</td>
                                    <td class="Snomed">n/a</td>
                                    <td class="LimitToList">n/a</td>
                                    <td class="SnomedValues">n/a</td>
                                </xsl:when>
                                
                                <xsl:when test="oe:rm_type_name='DV_INTERVAL'">
                                    <td class="ConstraintExpression"><xsl:call-template name="output-interval-constraint">
                                        <xsl:with-param name="interval-constraint" select="."/>
                                    </xsl:call-template></td>
                                    <td class="AllowMultipleSelection">False</td>
                                    <td class="ReadOnly">False</td>
                                    <td class="Snomed">n/a</td>
                                    <td class="LimitToList">n/a</td>
                                    <td class="SnomedValues">n/a</td>
                                </xsl:when>
                                
                                <xsl:when test="oe:rm_type_name='DV_MULTIMEDIA'">
                                    <td class="ConstraintExpression"><!-- tabular DV_MULTIMEDIA constraint TO DO!! --></td>
                                    <td class="AllowMultipleSelection">False</td>
                                    <td class="ReadOnly">False</td>
                                    <td class="Snomed">n/a</td>
                                    <td class="LimitToList">n/a</td>
                                    <td class="SnomedValues">n/a</td>
                                </xsl:when>
                                
                                <xsl:when test="oe:rm_type_name='DV_ORDINAL'">
                                    <td class="ConstraintExpression"><!-- display no constraint on tabular DV_ORDINAL--></td>
                                    <td class="AllowMultipleSelection">False</td>
                                    <td class="ReadOnly">False</td>
                                    <td class="Snomed">n/a</td>
                                    <td class="LimitToList">n/a</td>
                                    <td class="SnomedValues">n/a</td>
                                </xsl:when>

                                <xsl:when test="oe:rm_type_name='DV_PROPORTION'">
                                    <td class="ConstraintExpression"><xsl:call-template name="output-proportion-constraint">
                                        <xsl:with-param name="proportion-c-object" select="."/>
                                    </xsl:call-template></td>
                                    <td class="AllowMultipleSelection">False</td>
                                    <td class="ReadOnly">False</td>
                                    <td class="Snomed">n/a</td>
                                    <td class="LimitToList">n/a</td>
                                    <td class="SnomedValues">n/a</td>
                                </xsl:when>
                                
                                <xsl:when test="oe:rm_type_name='DV_QUANTITY'">
                                    <td class="ConstraintExpression"><xsl:call-template name="output-quantity-constraint">
                                        <xsl:with-param name="quantity-c-object" select="."/>
                                    </xsl:call-template></td>
                                    <td class="AllowMultipleSelection">False</td>
                                    <td class="ReadOnly">False</td>
                                    <td class="Snomed">
                                        <xsl:variable name="current-node-id" select="parent::node()/parent::node()/oe:node_id"/>
                                        <xsl:variable name="snomed-term-binding" select="$archetype-root/oe:term_bindings/oe:items[@code=$current-node-id]/oe:value/oe:code_string"/>
                                        <xsl:choose>
                                            <xsl:when test="$snomed-term-binding and not($snomed-term-binding='')">
                                                <xsl:value-of select="$snomed-term-binding"/>
                                            </xsl:when>
                                            <xsl:otherwise>n/a</xsl:otherwise>
                                        </xsl:choose>
                                    </td>
                                    <td class="LimitToList">n/a</td>
                                    <td class="SnomedValues">n/a</td>
                                </xsl:when>
                            
                                <xsl:when test="oe:rm_type_name='DV_TEXT' or oe:rm_type_name='DV_CODED_TEXT'">
                                    <td class="ConstraintExpression"><xsl:choose>
                                        <xsl:when test="oe:rm_type_name='DV_CODED_TEXT'">
                                            <xsl:variable name="no-of-codes" select="count(oe:attributes[oe:rm_attribute_name='defining_code']/oe:children[oe:rm_type_name='CODE_PHRASE']/oe:code_list)"/>
                                            <xsl:for-each select="oe:attributes[oe:rm_attribute_name='defining_code']/oe:children[oe:rm_type_name='CODE_PHRASE']/oe:code_list">
                                                <xsl:variable name="codestring" select="text()"/>
                                                <xsl:value-of select="$archetype-root/oe:term_definitions[@code=$codestring]/oe:items[@id='text']"/><xsl:if test="not(position()=number($no-of-codes))"><br/></xsl:if>
                                            </xsl:for-each>
                                        </xsl:when>
                                        <xsl:otherwise>Free or coded text</xsl:otherwise>
                                    </xsl:choose></td>
                                    <td class="AllowMultipleSelection">False</td>
                                    <td class="ReadOnly">False</td>
                                    <xsl:variable name="limit-to-list"><xsl:choose>
                                        <xsl:when test="oe:attributes[oe:rm_attribute_name='value']/oe:children[rm_type_name='string']/oe:item/oe:list_open='true'">No</xsl:when>
                                        <xsl:when test="not(oe:attributes[oe:rm_attribute_name='value']/oe:children[rm_type_name='string']/oe:item/oe:list_open)">n/a</xsl:when>
                                        <xsl:otherwise>Yes</xsl:otherwise>
                                    </xsl:choose>
                                    </xsl:variable>
                                    <xsl:choose>
                                        <xsl:when test="oe:rm_type_name='DV_CODED_TEXT' and oe:attributes[oe:rm_attribute_name='defining_code']/oe:children[oe:rm_type_name='CODE_PHRASE']/oe:terminology_id/oe:value='Snomed'">
                                            <xsl:variable name="current-node-id" select="parent::node()/parent::node()/oe:node_id"/>
                                            <xsl:variable name="snomed-term-binding" select="$archetype-root/oe:term_bindings/oe:items[oe:code=$current-node-id]/oe:value/oe:code_string"/>
                                            <td class="Snomed"><xsl:value-of select="$snomed-term-binding"/></td>
                                        </xsl:when>
                                        <xsl:otherwise><td class="Snomed">n/a</td></xsl:otherwise>
                                    </xsl:choose>
                                    <td class="LimitToList"><xsl:value-of select="$limit-to-list"/></td>
                                    <xsl:choose>
                                        <xsl:when test="oe:attributes[oe:rm_attribute_name='defining_code']/oe:children[oe:rm_type_name='CODE_PHRASE']/oe:code_list">
                                            <td class="SnomedValues"><xsl:for-each select="oe:attributes[oe:rm_attribute_name='defining_code']/oe:children[oe:rm_type_name='CODE_PHRASE']/oe:code_list">
                                                n/a<xsl:if test="not(position()=last())"><br/></xsl:if>
                                                </xsl:for-each></td>
                                        </xsl:when>
                                        <xsl:otherwise><td class="SnomedValues">n/a</td></xsl:otherwise>
                                    </xsl:choose>
                                    <td class="ArchetypePath"><xsl:value-of select="$archetype-path"/></td>
                                    <td class="ArchetypeValues">
                                        <xsl:variable name="code-list-set" select="oe:attributes[oe:rm_attribute_name='defining_code']/oe:children[oe:rm_type_name='CODE_PHRASE']/oe:code_list"/>
                                        <xsl:choose>
                                            <xsl:when test="$code-list-set">
                                                <xsl:for-each select="$code-list-set">
                                                    <xsl:value-of select="."/>
                                                    <xsl:if test="not(position()=last())"><br/></xsl:if>
                                                </xsl:for-each>
                                            </xsl:when>
                                            <xsl:otherwise>n/a</xsl:otherwise>
                                        </xsl:choose>
                                    </td>
                                </xsl:when>
                                
                                <xsl:when test="oe:rm_type_name='DV_URI' or oe:rm_type_name='DV_EHR_URI'">
                                    <td class="ConstraintExpression"><!-- tabular DV_URI constraint TO DO!! --></td>
                                    <td class="AllowMultipleSelection">False</td>
                                    <td class="ReadOnly">False</td>
                                    <td class="Snomed">n/a</td>
                                    <td class="LimitToList">n/a</td>
                                    <td class="SnomedValues">n/a</td>
                                </xsl:when>
                            </xsl:choose>
                            
                            <xsl:if test="not(oe:rm_type_name='DV_TEXT' or oe:rm_type_name='DV_CODED_TEXT')">
                                <td class="ArchetypePath"><xsl:value-of select="$archetype-path"/></td>
                            </xsl:if>
                            <td class="Annotation"><xsl:value-of select="$defaultAnnotation"/></td>
                        </tr>
                    </xsl:for-each>
                </tbody>
            </table>
        </div>
    </xsl:template>
    
    <xsl:template name="output-event-context"  xmlns="http://www.w3.org/1999/xhtml">    <!--  show EVENT CONTEXT -->
        <xsl:param name="context-node"/>
        <xsl:param name="archetype-root"/>
        <xsl:variable name="other-context" select="$context-node/oe:attributes[oe:rm_attribute_name='other_context']/oe:children"/>
        
        <xsl:for-each select="$other-context"> <!-- not interested in displaying the other RM attributes  at this stage -->
            <tr>
                <td colspan="15">
                    <xsl:choose>
                        <xsl:when test="@xsi:type='C_ARCHETYPE_ROOT'">
                            <xsl:apply-templates select=".">
                                <xsl:with-param name="archetype-root" select="." />
                            </xsl:apply-templates>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:apply-templates select=".">
                                <xsl:with-param name="archetype-root" select="$archetype-root" />
                            </xsl:apply-templates>
                        </xsl:otherwise>
                    </xsl:choose>
                </td>
            </tr>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="output-repeatability"  xmlns="http://www.w3.org/1999/xhtml">
        <xsl:param name="c_object"/>
        <xsl:choose>
            <xsl:when test="$c_object/oe:occurrences/oe:upper_unbounded='true' or number($c_object/oe:occurrences/oe:upper) &gt; 1">Yes</xsl:when>
            <xsl:otherwise>No</xsl:otherwise>
        </xsl:choose>
        <xsl:call-template name="get-cardinality"><xsl:with-param name="c_object" select="$c_object"/></xsl:call-template>
    </xsl:template>

    <xsl:template name="get-name-and-cardinality">
        <xsl:param name="archetype-root" />
        <xsl:param name="c_object" />
        <xsl:call-template name="get-name">
            <xsl:with-param name="archetype-root"  select="$archetype-root" />
            <xsl:with-param name="c_object"  select="$c_object"/>
        </xsl:call-template>
        <xsl:call-template name="get-cardinality">
            <xsl:with-param name="c_object" select="$c_object"/>
        </xsl:call-template>
    </xsl:template>
    
    <xsl:template name="get-name">
        <xsl:param name="archetype-root" />
        <xsl:param name="c_object" />
        
        <xsl:variable name="explicit-name" select="$c_object/oe:attributes[oe:rm_attribute_name='name']/oe:children[oe:rm_type_name='DV_TEXT']/oe:attributes[oe:rm_attribute_name='value']/oe:children[oe:rm_type_name='string']/oe:item/oe:list"></xsl:variable>
        <xsl:choose>
            <xsl:when test="$explicit-name and not($explicit-name='')"><xsl:value-of  select="$explicit-name"/></xsl:when> 
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$c_object/oe:attributes[oe:rm_attribute_name='name']/oe:children[oe:rm_type_name='DV_CODED_TEXT']"><!-- name is coded so we put AT node name in brackets -->
                        (<xsl:value-of select="$archetype-root/oe:term_definitions[@code=$c_object/oe:node_id]/oe:items[@id='text']" />)
                    </xsl:when>
                    <xsl:otherwise><xsl:value-of select="$archetype-root/oe:term_definitions[@code=$c_object/oe:node_id]/oe:items[@id='text']" /></xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

     <xsl:template name="get-cardinality">
         <xsl:param name="c_object"/>
         <xsl:param name="enclose">true</xsl:param>
         
         <xsl:variable name="lower-occurrences"><xsl:choose>
             <xsl:when test="$c_object/oe:occurrences/oe:lower_unbounded='true'">*</xsl:when>
             <xsl:otherwise><xsl:value-of select="$c_object/oe:occurrences/oe:lower"/></xsl:otherwise>
         </xsl:choose></xsl:variable>
         <xsl:variable name="upper-occurrences"><xsl:choose>
             <xsl:when test="$c_object/oe:occurrences/oe:upper_unbounded='true'">*</xsl:when>
             <xsl:otherwise><xsl:value-of select="$c_object/oe:occurrences/oe:upper"/></xsl:otherwise>
         </xsl:choose></xsl:variable>    
         
         <xsl:if test="not($enclose='false')"><xsl:text disable-output-escaping="yes"> [</xsl:text></xsl:if>
         <!--<xsl:choose>
             <xsl:when test="$lower-occurrences='1' and $upper-occurrences='1'" >1</xsl:when>
             <xsl:otherwise>-->
                 <xsl:value-of select="$lower-occurrences" />..<xsl:value-of select="$upper-occurrences" />
             <!--</xsl:otherwise>  
         </xsl:choose>-->
         <xsl:if test="not($enclose='false')"><xsl:text disable-output-escaping="yes">] </xsl:text></xsl:if>
     </xsl:template>
                
    <xsl:template name="output-allowed-proportion-types"  xmlns="http://www.w3.org/1999/xhtml">
        <xsl:param name="type-enum-constraint"/><!-- is of type C_INTEGER (list[0..1]:Set<Integer>; range[0..1]Interval<Integer>; assumed_value: Integer -->
        <xsl:call-template name="get-language-term">
            <xsl:with-param name="language-code">en</xsl:with-param>
            <xsl:with-param name="concept-code">600</xsl:with-param>
        </xsl:call-template>: 
        <xsl:choose>
            <xsl:when test="$type-enum-constraint/oe:list">
                <xsl:for-each select="$type-enum-constraint/oe:list">
                    <xsl:choose>
                        <xsl:when test="text()='0'"><!-- Ratio -->
                            <xsl:call-template name="get-language-term">
                                <xsl:with-param name="language-code">en</xsl:with-param>
                                <xsl:with-param name="concept-code">321</xsl:with-param>
                            </xsl:call-template>
                        </xsl:when>
                        <xsl:when test="text()='1'"><!-- Unitary -->
                            <xsl:call-template name="get-language-term">
                                <xsl:with-param name="language-code">en</xsl:with-param>
                                <xsl:with-param name="concept-code">644</xsl:with-param>
                            </xsl:call-template>
                        </xsl:when>
                        <xsl:when test="text()='2'">
                            <xsl:call-template name="get-language-term">
                                <xsl:with-param name="language-code">en</xsl:with-param>
                                <xsl:with-param name="concept-code">630</xsl:with-param>
                            </xsl:call-template>
                        </xsl:when><!-- Percent -->
                        <xsl:when test="text()='3'"><!-- Fraction -->
                            <xsl:call-template name="get-language-term">
                                <xsl:with-param name="language-code">en</xsl:with-param>
                                <xsl:with-param name="concept-code">646</xsl:with-param>
                            </xsl:call-template>
                        </xsl:when>
                        <xsl:when test="text()='4'"><!-- Integer fraction -->
                            <xsl:call-template name="get-language-term">
                                <xsl:with-param name="language-code">en</xsl:with-param>
                                <xsl:with-param name="concept-code">645</xsl:with-param>
                            </xsl:call-template>
                        </xsl:when>
                    </xsl:choose>
                    <xsl:if test="not(position()=last())">,</xsl:if>
                </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="get-language-term">
                    <xsl:with-param name="language-code">en</xsl:with-param>
                    <xsl:with-param name="concept-code">321</xsl:with-param>
                </xsl:call-template>,
                <xsl:call-template name="get-language-term">
                    <xsl:with-param name="language-code">en</xsl:with-param>
                    <xsl:with-param name="concept-code">644</xsl:with-param>
                </xsl:call-template>,
                <xsl:call-template name="get-language-term">
                    <xsl:with-param name="language-code">en</xsl:with-param>
                    <xsl:with-param name="concept-code">630</xsl:with-param>
                </xsl:call-template>,
                <xsl:call-template name="get-language-term">
                    <xsl:with-param name="language-code">en</xsl:with-param>
                    <xsl:with-param name="concept-code">646</xsl:with-param>
                </xsl:call-template>,
                <xsl:call-template name="get-language-term">
                    <xsl:with-param name="language-code">en</xsl:with-param>
                    <xsl:with-param name="concept-code">645</xsl:with-param>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose><br/>
    </xsl:template>
    
    <xsl:template name="get-property-unit-term">
        <xsl:param name="property-code"/>
        <xsl:variable name="unit-property-data-node" select="document($unit-property-data-path)/prop:PropertyUnits"/>
        <xsl:value-of select="$unit-property-data-node/prop:Property[@openEHR=$property-code]/@Text"/>
    </xsl:template>
    
    <xsl:template name="get-language-term">
        <xsl:param name="language-code"/>
        <xsl:param name="concept-code"/>
        <xsl:variable name="terminology-data-node" select="document($terminology-data-path)/term:Terminology"/>
        <xsl:choose>
            <xsl:when test="$terminology-data-node/term:Concept[@ConceptID=$concept-code and @Language=$language-code]">
                <xsl:value-of select="$terminology-data-node/term:Concept[@ConceptID=$concept-code and @Language=$language-code]/@Rubric"/>        
            </xsl:when>
            <xsl:otherwise>?</xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template name="output-count-constraint"  xmlns="http://www.w3.org/1999/xhtml">
        <xsl:param name="count-c-object"/>
        <xsl:variable name="c-integer" select="$count-c-object/oe:attributes[oe:rm_attribute_name='magnitude']/oe:children/oe:item[@xsi:type='C_INTEGER']"/>
        <xsl:if test="$c-integer">
            <xsl:if test="$c-integer/oe:range/oe:lower_unbounded='false'">&gt;<xsl:if test="$c-integer/oe:range/oe:lower_included='true'">=</xsl:if> 
                <xsl:value-of select="$c-integer/oe:range/oe:lower"/><xsl:if test="$c-integer/oe:range/oe:upper_unbounded='false'"><br/></xsl:if>
            </xsl:if>
            <xsl:if test="$c-integer/oe:range/oe:upper_unbounded='false'">&lt;<xsl:if test="$c-integer/oe:range/oe:upper_included='true'">=</xsl:if> 
                <xsl:value-of select="$c-integer/oe:range/oe:upper"/>
            </xsl:if>
        </xsl:if>    
    </xsl:template>
    
    <xsl:template name="output-date-constraint"  xmlns="http://www.w3.org/1999/xhtml">
        <xsl:param name="date-c-object"/>
        <xsl:variable name="date-pattern" select="$date-c-object/oe:attributes[oe:rm_attribute_name='value']/oe:children/oe:item[@xsi:type='C_DATE']/oe:pattern"/>
        Date only<br/><xsl:value-of select="$date-pattern"/>
    </xsl:template>
    
    <xsl:template name="output-datetime-constraint"  xmlns="http://www.w3.org/1999/xhtml">
        <xsl:param name="datetime-c-object"/>
        <xsl:variable name="date-pattern" select="$datetime-c-object/oe:attributes[oe:rm_attribute_name='value']/oe:children/oe:item[@xsi:type='C_DATE_TIME']/oe:pattern"/>
        Allow all<br/><xsl:value-of select="$date-pattern"/>
    </xsl:template>
    
    <xsl:template name="output-duration-constraint"  xmlns="http://www.w3.org/1999/xhtml">
        <xsl:param name="duration-c-object"/>
        <xsl:variable name="duration-pattern" select="$duration-c-object/oe:attributes[oe:rm_attribute_name='value']/oe:children/oe:item[@xsi:type='C_DURATION']/oe:pattern"/>
        <xsl:variable name="sub-day-pattern"><xsl:if test="contains($duration-pattern,'T')"><xsl:value-of select="substring-after($duration-pattern,'T')"/></xsl:if></xsl:variable>
        <xsl:variable name="day-pattern"><xsl:choose>
            <xsl:when test="contains($duration-pattern,'T')"><xsl:value-of select="substring(substring-before($duration-pattern,'T'),2)"/></xsl:when>
            <xsl:otherwise><xsl:value-of select="substring($duration-pattern,2)"/></xsl:otherwise>
        </xsl:choose></xsl:variable>
        <xsl:variable name="duration-units-allowed">
            <xsl:if test="not($day-pattern='')">
                <xsl:if test="contains($day-pattern,'Y')"> years,</xsl:if>
                <xsl:if test="contains($day-pattern,'M')"> months,</xsl:if>
                <xsl:if test="contains($day-pattern,'W')"> weeks,</xsl:if>
                <xsl:if test="contains($day-pattern,'D')"> days,</xsl:if>
            </xsl:if>
            <xsl:if test="not($sub-day-pattern='')">
                <xsl:if test="contains($sub-day-pattern,'H')"> hours,</xsl:if>
                <xsl:if test="contains($sub-day-pattern,'M')"> minutes,</xsl:if>
                <xsl:if test="contains($sub-day-pattern,'S')"> seconds,</xsl:if>                                           
            </xsl:if>
        </xsl:variable>
        <xsl:value-of select="substring($duration-units-allowed, 1, (string-length($duration-units-allowed)-1))"/>
    </xsl:template>

    <xsl:template name="output-interval-constraint"  xmlns="http://www.w3.org/1999/xhtml">
        <xsl:param name="interval-constraint"/>
        <xsl:variable name="interval-lower" select="$interval-constraint/oe:attributes[oe:rm_attribute_name='lower']/oe:children"/>
        <xsl:variable name="interval-upper" select="$interval-constraint/oe:attributes[oe:rm_attribute_name='upper']/oe:children"/>
        <xsl:choose >
            <xsl:when test="$interval-lower/oe:rm_type_name='DV_COUNT'">
                Lower: <xsl:call-template name="output-count-constraint">
                    <xsl:with-param name="count-c-object" select="$interval-lower"/>
                </xsl:call-template>
                <br/>Upper: <xsl:call-template name="output-count-constraint">
                    <xsl:with-param name="count-c-object" select="$interval-upper"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:when test="$interval-lower/oe:rm_type_name='DV_DATE'">
                Lower: <xsl:call-template name="output-date-constraint">
                    <xsl:with-param name="date-c-object" select="$interval-lower"/>
                </xsl:call-template>
                <br/>Upper: <xsl:call-template name="output-date-constraint">
                    <xsl:with-param name="date-c-object" select="$interval-upper"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:when test="$interval-lower/oe:rm_type_name='DV_DATE_TIME'">
                Lower: <xsl:call-template name="output-datetime-constraint">
                    <xsl:with-param name="datetime-c-object" select="$interval-lower"/>
                </xsl:call-template>
                <br/>Upper: <xsl:call-template name="output-datetime-constraint">
                    <xsl:with-param name="datetime-c-object" select="$interval-upper"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:when test="$interval-lower/oe:rm_type_name='DV_DURATION'">
                Lower: <xsl:call-template name="output-duration-constraint">
                    <xsl:with-param name="duration-c-object" select="$interval-lower"/>
                </xsl:call-template>
                <br/>Upper: <xsl:call-template name="output-duration-constraint">
                    <xsl:with-param name="duration-c-object" select="$interval-upper"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:when test="$interval-lower/oe:rm_type_name='DV_PROPORTION'">
                Lower: <xsl:call-template name="output-proportion-constraint">
                    <xsl:with-param name="proportion-c-object" select="$interval-lower"/>
                </xsl:call-template>
                <br/>Upper: <xsl:call-template name="output-proportion-constraint">
                    <xsl:with-param name="proportion-c-object" select="$interval-upper"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:when test="$interval-lower/oe:rm_type_name='DV_QUANTITY'">
                Lower: <xsl:call-template name="output-quantity-constraint">
                    <xsl:with-param name="quantity-c-object" select="$interval-lower"/>
                </xsl:call-template>
                <br/>Upper: <xsl:call-template name="output-quantity-constraint">
                    <xsl:with-param name="quantity-c-object" select="$interval-upper"/>
                </xsl:call-template>
            </xsl:when>
        </xsl:choose>
    </xsl:template>
    
    <xsl:template name="output-proportion-constraint"  xmlns="http://www.w3.org/1999/xhtml">
        <xsl:param name="proportion-c-object"/>
        <xsl:call-template name="output-allowed-proportion-types">
            <xsl:with-param name="type-enum-constraint" select="$proportion-c-object/oe:attributes[oe:rm_attribute_name='type']/oe:children/oe:item[@xsi:type='C_INTEGER']"/>
        </xsl:call-template>
        <xsl:variable name="c-numerator" select="$proportion-c-object/oe:attributes[oe:rm_attribute_name='numerator']/oe:children/oe:item[@xsi:type='C_REAL']"/>
        <xsl:variable name="c-denominator" select="$proportion-c-object/oe:attributes[oe:rm_attribute_name='denominator']/oe:children/oe:item[@xsi:type='C_REAL']"/>
        <xsl:variable name="numerator-lower"><xsl:choose>
            <xsl:when test="$c-numerator/oe:range/oe:lower_unbounded='false'"><xsl:value-of select="$c-numerator/oe:range/oe:lower"/></xsl:when>
            <xsl:otherwise>*</xsl:otherwise>
        </xsl:choose></xsl:variable>
        <xsl:variable name="numerator-upper"><xsl:choose>
            <xsl:when test="$c-numerator/oe:range/oe:upper_unbounded='false'"><xsl:value-of select="$c-numerator/oe:range/oe:upper"/></xsl:when>
            <xsl:otherwise>*</xsl:otherwise>
        </xsl:choose></xsl:variable>
        <xsl:variable name="denominator-lower"><xsl:choose>
            <xsl:when test="$c-denominator/oe:range/oe:lower_unbounded='false'"><xsl:value-of select="$c-denominator/oe:range/oe:lower"/></xsl:when>
            <xsl:otherwise>*</xsl:otherwise>
        </xsl:choose></xsl:variable>
        <xsl:variable name="denominator-upper"><xsl:choose>
            <xsl:when test="$c-denominator/oe:range/oe:upper_unbounded='false'"><xsl:value-of select="$c-denominator/oe:range/oe:upper"/></xsl:when>
            <xsl:otherwise>*</xsl:otherwise>
        </xsl:choose></xsl:variable>
        Numerator:
        <xsl:choose>
            <xsl:when test="$numerator-lower=$numerator-upper"><xsl:value-of select="$numerator-lower"/></xsl:when>
            <xsl:otherwise>
                <xsl:if test="$numerator-lower!='*'"><b>&gt;<xsl:if test="$c-numerator/oe:range/oe:lower_included">=</xsl:if></b>
                    &#160;<xsl:value-of select="$numerator-lower"/>&#160;</xsl:if>
                <xsl:if test="$numerator-upper!='*'"><b>&lt;<xsl:if test="$c-numerator/oe:range/oe:upper_included">=</xsl:if></b>
                    &#160;<xsl:value-of select="$numerator-upper"/></xsl:if>
            </xsl:otherwise>
        </xsl:choose><br/>Denominator:
        <xsl:choose>
            <xsl:when test="$denominator-lower=$denominator-upper"><xsl:value-of select="$denominator-lower"/></xsl:when>
            <xsl:otherwise>
                <xsl:if test="$denominator-lower!='*'"><b>&gt;<xsl:if test="$c-denominator/oe:range/oe:lower_included">=</xsl:if></b>
                    &#160;<xsl:value-of select="$denominator-lower"/>&#160;</xsl:if>
                <xsl:if test="$denominator-upper!='*'"><b>&lt;<xsl:if test="$c-denominator/oe:range/oe:upper_included">=</xsl:if></b>
                    &#160;<xsl:value-of select="$denominator-upper"/></xsl:if>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    <xsl:template name="output-quantity-constraint"  xmlns="http://www.w3.org/1999/xhtml">
        <xsl:param name="quantity-c-object"/>
        <xsl:variable name="quantity-property-code" select="$quantity-c-object/oe:property/oe:code_string"/>
        <xsl:variable name="quantity-property-name">
            <xsl:call-template name="get-property-unit-term">
                <xsl:with-param name="property-code" select="$quantity-property-code"/>
            </xsl:call-template>
        </xsl:variable>
        <i>Property</i> = <xsl:value-of select="translate($quantity-property-name, $lcletters, $ucletters)"/>
    </xsl:template>

</xsl:stylesheet>